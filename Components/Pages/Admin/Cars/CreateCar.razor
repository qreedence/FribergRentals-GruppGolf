@page "/admin/cars/create"
@inject ICar CarRepo
@inject ICategory CategoryRepo

<h3>Add New Car</h3>

<EditForm Model="Car" OnSubmit="Submit" FormName="CreateCar">
    <div>
        <label>Brand</label>
        <InputText @bind-Value="Car.Brand"></InputText>
    </div>
    <div>
        <label>Model</label>
        <InputText @bind-Value="Car.Model"></InputText>
    </div>
    <div>
        <label>Description</label>
        <InputText @bind-Value="Car.Description"></InputText>
    </div>
    <div>
        <label>Price</label>
        <InputNumber @bind-Value="Car.Price"></InputNumber>
    </div>
    <div>
        <label>Image URLs (Optional)</label>
        <label>Image URL 1</label>
        <InputText @bind-Value="Car.ImageUrl1"></InputText>
        <label>Image URL 2</label>
        <InputText @bind-Value="Car.ImageUrl2"></InputText>
        <label>Image URL 3</label>
        <InputText @bind-Value="Car.ImageUrl3"></InputText>
    </div>
    <div>
        <label>Categories</label>
        @if (Categories == null)
        {
            <p>Loading..</p>
        }
        else if (Categories.Count == 0)
        {
            <p>No categories found.</p>
        } 
        else
        {
            <ul>
                @foreach (var category in Categories)
                {
                    <input type="checkbox" @bind="Car.Categories" value="@category">@category.Name; 
                }
            </ul>
        }
    </div>


    <button type="submit">Create</button>
</EditForm>

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [SupplyParameterFromForm]
    public Car Car { get; set; }
    public List<int> tempId { get; set; }

    public List<Category> Categories { get; set; } = new List<Category>();

    void addToList()
    {
        Car.Categories = Categories;
    }

    protected override async Task OnInitializedAsync()
    {
        if (Car == null)
        {
            Car = new Car { Categories = new List<Category>() };
        }
        Categories = await CategoryRepo.GetAll();
    }

    public async Task Submit()
    {
            addToList();
            await CarRepo.AddAsync(Car);
            NavigationManager.NavigateTo("/admin/cars");
    }

    public async Task ToggleCategorySelection(MouseEventArgs e, int categoryId)
    {
        var category = Categories.FirstOrDefault(c => c.Id == categoryId);
        if (category != null)
        {
            if (Car.Categories.Contains(category))
            {
                Car.Categories.Remove(category);
            }
            else
            {
                Car.Categories.Add(category);
            }
        }
    }
}

