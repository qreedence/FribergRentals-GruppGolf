@page "/admin/users/edit"
@page "/admin/users/edit/{id:int}"

@rendermode InteractiveServer

<div class="card page-card">
    <EditForm class="form edit" Model="UserModell" OnSubmit="Submit" FormName="EditUser">
        <h3>Edit User</h3>
        <div class="flex-row">
            <label>First Name</label>
            <InputText @bind-Value="UserModell.FirstName" placeholder="@UserModell.FirstName"></InputText>
        </div>
        <div class="flex-row">
            <label>Last Name</label>
            <InputText @bind-Value="UserModell.LastName" placeholder="@UserModell.LastName"></InputText>
        </div>
        <div class="flex-row">
            <label>Email</label>
            <InputText @bind-Value="UserModell.Email" placeholder="@UserModell.Email"></InputText>
        </div>
        <div class="flex-row">
            <label>Password</label>
            <InputText @bind-Value="UserModell.Password" placeholder="@UserModell.Password"></InputText>
        </div>
        <div class="flex-row">
            <label>Confirm Password</label>
            <InputText @bind-Value="UserModell.ConfirmPassword" placeholder="@UserModell.ConfirmPassword"></InputText>
        </div>
        <div class="form-btns">
            <button class="form-btn" type="submit">Save Changes</button>
            <button class="form-btn danger" @onclick="Delete" type="button">Delete</button>
        </div>
    </EditForm>
</div>


@code {

    public class UserModel {
        public int id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }

    public UserModel UserModell { get; set; } = new UserModel();
    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm]
    public User User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await UserRepo.GetByIdAsync(Id);
        UserModell.id = User.Id;
        UserModell.FirstName = User.FirstName;
        UserModell.LastName = User.LastName;
        UserModell.Email = User.Email;
        UserModell.Password = User.Password;
        UserModell.ConfirmPassword = User.ConfirmPassword;
    }

    public async Task Submit()
    {
        User.Id = UserModell.id;
        User.FirstName = UserModell.FirstName;
        User.LastName = UserModell.LastName;
        User.Email = UserModell.Email;
        User.Password = UserModell.Password;
        User.ConfirmPassword = UserModell.ConfirmPassword;
        await UserRepo.EditAsync(User);
        NavigationManager.NavigateTo("/admin/users");
        
    }
    async Task Delete()
    {
        User.Id = UserModell.id;
        User.FirstName = UserModell.FirstName;
        User.LastName = UserModell.LastName;
        User.Email = UserModell.Email;
        User.Password = UserModell.Password;
        User.ConfirmPassword = UserModell.ConfirmPassword;
        await UserRepo.DeleteAsync(User.Id);
        NavigationManager.NavigateTo("/admin/users");
    }
}
