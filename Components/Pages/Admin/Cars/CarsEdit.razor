@page "/admin/cars/edit"
@page "/admin/cars/edit/{id:int}"

@rendermode InteractiveServer

<div class="card page-card">
    <EditForm class="form edit" Model="Car" OnSubmit="Submit" FormName="EditCar">
        <h3>Edit Car</h3>
        <div class="flex-row">
            <label>Brand</label>
            <InputText @bind-Value="Car.Brand">@Car.Brand</InputText>
        </div>
        <div class="flex-row">
            <label>Model</label>
            <InputText @bind-Value="Car.Model">@Car.Model</InputText>
        </div>
        <div class="flex-row">
            <label>Description</label>
            <InputText @bind-Value="Car.Description">@Car.Description</InputText>
        </div>
        <div class="flex-row">
            <label>Price</label>
            <InputNumber @bind-Value="Car.Price" placeholder="@Car.Price"></InputNumber>
        </div>
        <div class="flex-row">
            <label>Image URL 1</label>
            <InputText @bind-Value="Car.ImageUrl1" placeholder="@Car.ImageUrl1"></InputText>
        </div>
        <div class="flex-row">
            <label>Image URL 2</label>
            <InputText @bind-Value="Car.ImageUrl2" placeholder="@Car.ImageUrl2"></InputText>
        </div>
        <div class="flex-row">
            <label>Image URL 3</label>
            <InputText @bind-Value="Car.ImageUrl3" placeholder="@Car.ImageUrl3"></InputText>
        </div>
        <div class="flex-row">
            <label>Category</label>
            @foreach (var category in Categories)
            {
                <br />
                //Tillfälligt för att skapa space mellan checkboxarna, annars kunde 2 bli checkade med 1 tryck
                if (Car.Categories.Contains(category))
                {
                    <CategoryCheckbox Name="@category.Name" Id="category.Id" IsSelected="true" OnCategorySelection="HandleCheckboxChecked" />
                }
                else
                {
                    <CategoryCheckbox Name="@category.Name" Id="category.Id" OnCategorySelection="HandleCheckboxChecked" />
                }

            }
        </div>
        <div class="form-btns">
            <button class="form-btn" type="submit">Save Changes</button>
            <button class="form-btn danger" @onclick="Delete" type="button">Delete</button>
        </div>    
    </EditForm>

    <NavLink href="admin/cars" Match="NavLinkMatch.All">Back</NavLink>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Car Car { get; set; } = new Car();

    public List<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            Car = await CarRepo.GetByIdAsync(Id);
            Categories = await CategoryRepo.GetAll();
        }
    }

    async Task Submit()
    {
        await CarRepo.EditAsync(Car);
        NavigationManager.NavigateTo("/admin/cars");
    }

    async Task Delete()
    {
        await CarRepo.DeleteAsync(Car.Id);
        NavigationManager.NavigateTo("admin/cars");
    }

    private void HandleCheckboxChecked(int id)
    {
        var category = Categories.FirstOrDefault(c => c.Id == id);
        if (!Car.Categories.Contains(category))
        {
            Car.Categories.Add(category);
        }
        else
        {
            Car.Categories.Remove(category);
        }
    }
}