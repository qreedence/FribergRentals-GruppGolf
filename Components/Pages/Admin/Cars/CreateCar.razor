@page "/admin/cars/create"

@rendermode InteractiveServer

<div class="card page-card">
    <EditForm class="form edit" Model="Car" OnSubmit="Submit" FormName="CreateCar">
        <h3>Add New Car</h3>
        <div class="flex-row">
            <label>Brand</label>
            <InputText @bind-Value="Car.Brand"></InputText>
        </div>
        <div class="flex-row">
            <label>Model</label>
            <InputText @bind-Value="Car.Model"></InputText>
        </div>
        <div class="flex-row">
            <label>Description</label>
            <InputText @bind-Value="Car.Description"></InputText>
        </div>
        <div class="flex-row">
            <label>Price</label>
            <InputNumber @bind-Value="Car.Price"></InputNumber>
        </div>
        <div class="flex-row">
            <label>Image URL 1</label>
            <InputText @bind-Value="Car.ImageUrl1"></InputText>
        </div>
        <div class="flex-row">
            <label>Image URL 2</label>
            <InputText @bind-Value="Car.ImageUrl2"></InputText>
        </div>
        <div class="flex-row">
            <label>Image URL 3</label>
            <InputText @bind-Value="Car.ImageUrl3"></InputText>
        </div>

        <div class="flex-row">
            <label>Categories</label>
            @if (Categories == null)
            {
                <p>Loading..</p>
            }
            else if (Categories.Count == 0)
            {
                <p>No categories found.</p>
            }
            else
            {
                    @foreach (var category in Categories)
                    {
                        <CategoryCheckbox Name="@category.Name" Id="category.Id" OnCategorySelection="HandleCheckboxChecked" />
                    }
            }
        </div>
        <button class="form-btn" type="submit">Create</button>
    </EditForm>
</div>


@code {
    [SupplyParameterFromForm]
    public Car Car { get; set; }

    public List<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        if (Car == null)
        {
            Car = new Car { Categories = new List<Category>() };
        }
        Categories = await CategoryRepo.GetAll();
    }

    public async Task Submit()
    {
        await CarRepo.AddAsync(Car);
        NavigationManager.NavigateTo("/admin/cars");
    }

    private void HandleCheckboxChecked(int id)
    {
        var category = Categories.FirstOrDefault(c => c.Id == id);
        if (!Car.Categories.Contains(category))
        {
            Car.Categories.Add(category);
        }
        else
        {
            Car.Categories.Remove(category);
        }
    }
}

