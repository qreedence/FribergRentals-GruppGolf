@page "/createaccount"
@using FribergRentals.Data.Repositories
@using FribergRentals.Data.Models
@using FribergRentals.Data.Interfaces

<div class="login-page">
    <EditForm class="form" Model="Customer" OnSubmit="Submit" FormName="new-user-form">
        <div>
            <span class="material-symbols-outlined">account_circle</span>
            <InputText @bind-Value="Customer!.FirstName" placeholder="First Name" />
        </div>
        <div>
            <span class="material-symbols-outlined">account_circle</span>
            <InputText @bind-Value="Customer!.LastName" placeholder="Last Name" />
        </div>
        <div>
            <span class="material-symbols-outlined">mail</span>
            <InputText @bind-Value="Customer!.Email" placeholder="Email"/>
        </div>
        <div>
            <span class="material-symbols-outlined">lock</span>
            <InputText type="password" @bind-Value="Customer!.Password" placeholder="Password"></InputText>
        </div>
        <div>
            <span class="material-symbols-outlined">lock</span>
            <InputText type="password" @bind-Value="Customer!.ConfirmPassword" placeholder="Confirm Password"></InputText>
        </div>
        <button class="login-btn small" type="submit">Create Account</button>
        <p>@Confirm</p>

        @if (BackLinkVisible)
        {
            <NavLink href="/" Match="@NavLinkMatch.All">Go back</NavLink>
        }
    </EditForm>
</div>




    @code {
        [SupplyParameterFromForm]
        public Customer Customer { get; set; }
        public string Id { get; set; }
        public string Confirm;
        public bool BackLinkVisible = false;
        protected override void OnInitialized() => Customer ??= new();

        async Task Submit()
        {
            if (Customer != null)
            {
                Customer.Id = 0;
                List<User> allUsers = await UserRepo.GetAllAsync();
                bool userExists = false;
                foreach (var user in allUsers)
                {
                    if (user.Email == Customer.Email)
                    {
                        userExists = true;
                    }
                }
                if (!userExists)
                {
                    await CustomerRepo.AddAsync(Customer);
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    Confirm = "An account with that email address already exists!";
                }
            }
            else
            {
                Confirm = "Something went wrong, try again!";
            }
            BackLinkVisible = true;
        }
    }
