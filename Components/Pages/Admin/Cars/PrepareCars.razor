@page "/admin/cars/prepare"
@inject IOrder OrderRepo
@rendermode InteractiveServer

<div class="card page-card">
    <div class="form">
        <h3>Cars to be prepared</h3>
        <div class="flex-row">
            <label>Select Date</label>
            <InputDate @bind-Value="Order.PickupDate"></InputDate>
        </div>
        <div class="form-btns">
            <button class="form-btn" @onclick="Confirm" type="button">Confirm</button>
        </div>
        @if (ReadyCarList == null)
        {
            <tr>
                <td colspan="9">
                    <span>Loading...</span>
                </td>
            </tr>
        }
        else if (ReadyCarList.Count == 0)
        {
            <tr>
                <td colspan="9">
                    <span>No cars to be rented out that day.</span>
                </td>
            </tr>
        }
    </div>
   
    @if(ReadyCarList.Count > 0)
    {
        <table>
            <thead>
                <tr>
                    <th>Brand</th>
                    <th>Model</th>
                    <th>Customer</th>
                    <th>Total Price</th>
                    <th>Pickup Date</th>
                    <th>Pickup Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in ReadyCarList)
                {
                    <tr>
                        <td>@order.Car.Brand</td>
                        <td>@order.Car.Model</td>
                        <td>@order.Customer.FirstName @order.Customer.LastName</td>
                        <td>@order.TotalPrice</td>
                        <td>@DateOnly.FromDateTime(order.PickupDate)</td>
                        <td>@TimeOnly.FromDateTime(order.PickupDate)</td>
                        <td>
                            <EditCarButton Id="@order.Id"></EditCarButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>





@code {
    public Order Order { get; set; } = new Order();
    public List<Order> Orders { get; set; } = new List<Order>();
    public List<Order> ReadyCarList { get; set; } = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        Order.PickupDate = DateTime.Now;
        await Confirm();
    }
    private async Task Confirm()
    {
        Orders = await OrderRepo.GetAllAsync();
        ReadyCarList = Orders.Where(o => o.PickupDate.Date == Order.PickupDate.Date).ToList();
             
    }
}
